{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#abstract","title":"Abstract","text":"<p>Software development can be complicated! Some lessons are only learned through mistakes and practical experience. If you want to learn the lessons without making mistakes, check out mine and what I've learned developing software throughout the years!</p>"},{"location":"#outline","title":"Outline","text":"<ul> <li>My Top Lessons Learned</li> <li>Additional Resources</li> </ul>"},{"location":"#references","title":"References","text":"<p>Check out additional Resources here.</p> <p>The repository containing the presentation materials can be found on GitLab. Please submit any issues or pull requests there. Thanks!</p>"},{"location":"Lessons/","title":"Lessons","text":"<p>These are my top lessons learned, along with additional info on related topics.</p>"},{"location":"Lessons/#what-would-make-your-job-easier-if-everyone-else-did-it-do-that","title":"What would make your job easier if everyone else did it?  Do THAT!","text":"<p>Relevant Topics</p> <p>Feedback Documentation</p> <p>Software development is a team sport.</p>"},{"location":"Lessons/#write-documentation-in-preparation-for-the-next-person","title":"Write documentation in preparation for the next person","text":"<p>Relevant Topics</p> <p>Documentation</p> <ul> <li>Make it so people (including yourself) can use your work without relying on your help or memory</li> <li>Be clear and explicit - you won't remember!</li> <li>Act like every day is your last day - don't wait until the end to write it down</li> </ul>"},{"location":"Lessons/#dont-make-big-changes-on-friday-afternoons","title":"Don't make big changes on Friday afternoons","text":"<p>Relevant Topics</p> <p>Workflow Breaking Changes</p> <p>You don't want to break everyone's code on a Friday afternoon and stay late fixing it, do you??</p> <ul> <li>Keep work on a branch</li> <li>Merge the main branch into yours before merging back</li> <li> <p>Synchronize breaking changes with teammates</p> </li> <li> <p>Understand the impact of your changes</p> <ul> <li>Who is working on something related?</li> <li>Where will my changes be seen?</li> </ul> </li> <li> <p>Wait for the CI to finish to verify it all works (example CI pipeline)!</p> </li> </ul> <p> <sup>1</sup></p> <ul> <li>If you don't have time to resolve problems after a merge, don't merge!<ul> <li>Merging at the end of the day, right before a weekend, or right before a major test is not a great idea</li> </ul> </li> <li>Rushing through development to meet a deadline is not an excuse to skip the process - this is when mistakes happen!!</li> </ul>"},{"location":"Lessons/#commit-and-push-code-often","title":"Commit and push code OFTEN","text":"<p>Relevant Topics</p> <p>Workflow</p> <p>Commit and push regularly (if you don't push in git, your work stays local and isn't backup up on the server):</p> <ul> <li>Lets leads see progress</li> <li>Saves your work in case something happens to your machine</li> <li>Runs and tests code through the CI pipeline</li> </ul>"},{"location":"Lessons/#define-requirements-and-make-a-design-before-coding","title":"Define requirements and make a design BEFORE coding","text":"<p>Relevant Topics</p> <p>Requirements &amp; Design</p> <ul> <li>Defining requirements ahead of time dictates what the code should do and determines how it should be tested and designed.</li> <li>Doing this work up front saves a lot of headache later when trying to make sure the thing you built is suited for the task.</li> </ul>"},{"location":"Lessons/#write-tests-and-write-them-first","title":"Write tests - and write them FIRST","text":"<p>Relevant Topics</p> <p>Testable Code Test Driven Development</p> <ul> <li>Define the behavior you want FIRST - It makes developing much easier!</li> <li>Tests should be driven by requirements and expected behavior</li> </ul>"},{"location":"Lessons/#learn-the-tools-to-become-more-effective","title":"Learn the tools to become more effective","text":"<p>Relevant Topics</p> <p>Tools</p> <ul> <li>Try the tutorials on common tools (git, VSCode, Gitlab CI, debuggers) - they will give tips on features and shortcuts you may not have known about</li> <li>Use the tools available, within reason</li> <li>Don't use every tool you can find - it makes unnecessary dependencies for others</li> </ul>"},{"location":"Lessons/#use-debuggers","title":"Use debuggers","text":"<p>Relevant Topics</p> <p>Debugging</p>"},{"location":"Lessons/#use-logging-and-appropriate-log-levels","title":"Use logging and appropriate log levels","text":"<p>Relevant Topics</p> <p>Logging</p>"},{"location":"Lessons/#ask-about-expectations-for-code-style-deployment-classification-etc","title":"Ask about expectations for code (style, deployment, classification, etc)","text":"<p>Relevant Topics</p> <p>Coding Guidelines</p> <p>Each project is different. Ask the team or lead for their opinion and any relevant documentation - feel free to create it if it doesn't exist!</p> <p>If documentation doesn't exist, create it yourself! Putting a draft in front of the lead or team and asking for buy-in is a lot easier than asking for someone to produce it themselves.  Plus, if you make the document, you can recommend styles that work for you.</p>"},{"location":"Lessons/#provide-feedback-on-the-code-and-process","title":"Provide feedback on the code AND process","text":"<p>Relevant Topics</p> <p>Code Reviews Feedback</p> <p>Be comfortable providing feedback up the chain on what is/isn't working. Everyone wants things to go smoothly.</p> <p>Some common process problems:</p> <ul> <li>Challenges with project onboarding<ul> <li>What would make things easier?</li> </ul> </li> <li>Process bottlenecks (code review backups)</li> <li>Single points of failure</li> </ul> <p>If the problems are identified, solutions can be tried - it doesn't have to be perfect the first time.</p> <p>Request a forum for feedback if one does not exist. Some examples include</p> <ul> <li>1-on-1 (request these if you do not have them)</li> <li>Retrospective meetings</li> </ul>"},{"location":"Lessons/#ask-for-help-within-team-and-outside-team","title":"Ask for help (within team and outside team)","text":"<p>Relevant Topics</p> <p>Feedback</p> <p>Don't be afraid to ask questions!</p>"},{"location":"Lessons/#add-maintenance-into-the-schedule","title":"Add maintenance into the schedule","text":"<p>The demands from sponsors is high, but there is often a pending \"we should fix this when we have time...\" That time never comes unless it is scheduled in.</p> <p>Taking time to improve process, testing, documentation (non-feature adding stuff) is important and should be scheduled - it saves time in long run.</p>"},{"location":"Lessons/#update-software-versions-when-there-is-a-reason-to-do-so","title":"Update software versions when there is a reason to do so","text":"<p>Relevant Topics</p> <p>Breaking Changes</p> <ul> <li>Updates can introduce breaking changes unnecessarily.</li> <li>Try to understand the implications of an update beyond the scope of the component(s) for which you are responsible.</li> </ul>"},{"location":"Lessons/#check-results-for-errors","title":"Check results for errors","text":"<p>Relevant Topics</p> <p>Secure Coding</p> <p>Many functions will set a code or indicator when something goes wrong. Make sure you check to see what they say.</p>"},{"location":"Lessons/#use-issue-trackers-to-break-up-work-and-track-progress","title":"Use issue trackers to break up work and track progress","text":"<p>Issue trackers like GitLab and Jira are useful for Project Manager, but can also be helpful in splitting up a task into managable chunks. A branch for each issue also helps keep work separated and reviewable.</p> <ul> <li>Create tickets to keep focused, track progress, add notes<ul> <li>If there were problems you encountered and solved (or not), add info to the ticket, in case the problem is encountered later - so someone else can use what you learned</li> </ul> </li> </ul> <ol> <li> <p>https://gitlab.com/ \u21a9</p> </li> </ol>"},{"location":"Resources/","title":"Resources","text":"","tags":["reference","resource"]},{"location":"Resources/#books","title":"Books","text":"<p>Book Playlist</p> <p>The books below have been added to a Playlist on O'Reilly's site. Feel free to check it out or add to it!</p> <ul> <li>Refactoring: Improving the Design of Existing Code<ul> <li>By\u00a0Martin Fowler</li> <li>eBook: https://learning.oreilly.com/library/view/refactoring-improving-the/9780134757681/ch03.xhtml#ch03lev1sec2</li> <li>Highlights<ul> <li>Bad Smells in Code: http://www.laputan.org/pub/patterns/fowler/smells.pdf</li> </ul> </li> </ul> </li> <li>Modern C++ Programming with Test-Driven Development<ul> <li>By\u00a0Jeff Langr</li> <li>eBook: https://learning.oreilly.com/library/view/modern-c-programming/9781941222423/f_0053.html#c3thinking.xref</li> <li>Highlights<ul> <li>Test Driven Development</li> </ul> </li> </ul> </li> </ul>","tags":["reference","resource"]},{"location":"Topics/Breaking%20Changes/","title":"Breaking Changes","text":""},{"location":"Topics/Breaking%20Changes/#scenario","title":"Scenario","text":"<ul> <li>Someone ...<ul> <li>updated a development system</li> <li>changed required software versions</li> <li>updated their code</li> </ul> </li> <li>... and now ...<ul> <li>I can't build my code</li> <li>my tests fail</li> <li>nothing is working</li> </ul> </li> </ul>"},{"location":"Topics/Breaking%20Changes/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Work on branches (see Workflow) to limit changes to the rest of the team until they can be verified</li> <li>Don't break the build environment</li> <li>Let teammates know if a breaking change is required</li> <li>Provide guidance on how to adapt to the breaking change</li> </ul>"},{"location":"Topics/Breaking%20Changes/#what-is-a-breaking-change","title":"What is a Breaking Change?","text":"<p>A change to functionality that intentionally OR unintentionally stops something else from working.</p>"},{"location":"Topics/Breaking%20Changes/#how-to-identify-a-breaking-change","title":"How to Identify a Breaking Change","text":"<ul> <li>Understand the impact of your changes<ul> <li>Who is working on something related?</li> <li>Where will my changes be seen?</li> </ul> </li> </ul>"},{"location":"Topics/Breaking%20Changes/#how-to-minimize-impact-of-breaking-changes","title":"How to Minimize Impact of Breaking Changes","text":"<p>Workflow takeaways:</p> <ul> <li>Keep work on a branch</li> <li>Merge the main branch into yours before merging back</li> <li>Synchronize breaking changes with teammates</li> <li> <p>Wait for the CI to finish to verify it all works!</p> </li> <li> <p>If you don't have time to resolve problems after a merge, don't merge!</p> <ul> <li>Merging at the end of the day, right before a weekend, or right before a major test is not a great idea</li> </ul> </li> <li>Rushing through development to meet a deadline is not an excuse to skip the process - this is when mistakes happen!!</li> </ul>"},{"location":"Topics/Breaking%20Changes/#what-to-do-if-there-is-a-breaking-change","title":"What to Do If There Is a Breaking Change","text":"<ul> <li>Identify the scope of changes</li> <li>Try to foresee what is required to adapt to the change</li> <li>Communicate the required changes to teammates at meetings, provide support and Documentation, and justification on why the break needs to happen</li> </ul>"},{"location":"Topics/Breaking%20Changes/#breaking-software-updates","title":"Breaking Software Updates","text":""},{"location":"Topics/Breaking%20Changes/#example-scenario","title":"Example Scenario","text":"<ul> <li>Someone finds new version of software to get shiny, cool, new (unnecessary) feature<ul> <li>Then dependencies for the software increase</li> <li>OS or other software does not support the increased dependencies</li> <li>Everything breaks</li> </ul> </li> <li>Resolution<ul> <li>Spend (lots of) time fixing problems (me)</li> <li>Revert to original version</li> </ul> </li> </ul>"},{"location":"Topics/Code%20Reviews/","title":"Code Reviews","text":""},{"location":"Topics/Code%20Reviews/#scenario","title":"Scenario","text":"<ul> <li>I am new or don't know enough about the code to do a code review</li> <li>I don't know what to even look for when reviewing code</li> <li>Do I have to fix everything people comment on in my code?</li> <li>Code reviews are a stupid process that wastes time</li> </ul>"},{"location":"Topics/Code%20Reviews/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Don't be afraid to review code - Even if you don't understand the code, code reviews are useful for everyone</li> <li>The person writing the code to be reviewed may not be confident either, so any review is great</li> <li>Use conventional comments to help clarify your intentions.</li> <li>Read other people's comments - You may learn something!</li> <li>Be kind as a reviewer and open as a reviewee</li> </ul>"},{"location":"Topics/Code%20Reviews/#what-to-look-for","title":"What to Look for?","text":"<ul> <li>Bugs/Logic problems</li> <li>Efficiency improvements</li> <li>Documentation/comments</li> <li>Consistency<ul> <li>Naming conventions</li> <li>Formatting</li> </ul> </li> <li>Tests</li> <li>Magic numbers<ul> <li>Where did they come from?</li> <li>Could they change?</li> <li>What are the units?</li> </ul> </li> <li>\"Bad smells\"</li> </ul>"},{"location":"Topics/Code%20Reviews/#for-reviewer","title":"For Reviewer","text":"<ul> <li>Help identify potential issues</li> <li>Aim to learn why things were done a certain way<ul> <li>Learn new techniques or skills</li> <li>If something's confusing, ask for clarification (maybe it should be in the comments)</li> </ul> </li> <li>Gain an understanding of teammate's work<ul> <li>The reviewed code may be your responsibility one day!</li> </ul> </li> </ul>"},{"location":"Topics/Code%20Reviews/#for-reviewee","title":"For Reviewee","text":"<ul> <li>Nitpicks don't always have to be implemented</li> <li>Learn from teammate's suggestions</li> <li>Find potential coding errors</li> <li>Learn new ways of looking at a problem</li> <li>If people are struggling to understand something, it likely needs clarification<ul> <li>May need to split into clearer functions (see Testable Code)</li> <li>May need to add more comments or Documentation</li> </ul> </li> </ul>"},{"location":"Topics/Code%20Reviews/#conventional-comments","title":"Conventional Comments","text":"<p>See conventional comments<sup>1</sup> for more information</p> <p> <sup>1</sup></p> Label Description praise: Praises highlight something positive. Try to leave at least one of these comments per review.\u00a0Do not\u00a0leave false praise (which can actually be damaging).\u00a0Do\u00a0look for something to sincerely praise. nitpick: Nitpicks are trivial preference-based requests. These should be non-blocking by nature. suggestion: Suggestions propose improvements to the current subject. It's important to be explicit and clear on\u00a0what\u00a0is being suggested and\u00a0why\u00a0it is an improvement. Consider using patches and the\u00a0blocking\u00a0or\u00a0non-blocking decorations\u00a0to further communicate your intent. issue: Issues highlight specific problems with the subject under review. These problems can be user-facing or behind the scenes. It is strongly recommended to pair this comment with a\u00a0<code>suggestion</code>. If you are not sure if a problem exists or not, consider leaving a\u00a0<code>question</code>. todo: TODO's are small, trivial, but necessary changes. Distinguishing todo comments from issues: or suggestions: helps direct the reader's attention to comments requiring more involvement. question: Questions are appropriate if you have a potential concern but are not quite sure if it's relevant or not. Asking the author for clarification or investigation can lead to a quick resolution. thought: Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities. chore: Chores are simple tasks that must be done before the subject can be \u201cofficially\u201d accepted. Usually, these comments reference some common process. Try to leave a link to the process description so that the reader knows how to resolve the chore. note: Notes are always non-blocking and simply highlight something the reader should take note of. <p><sup>1</sup></p> <ol> <li> <p>https://conventionalcomments.org/ \u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"Topics/Coding%20Guidelines/","title":"Coding Guidelines","text":""},{"location":"Topics/Coding%20Guidelines/#scenario","title":"Scenario","text":"<ul> <li>I like writing code my way, but it's different from the rest of my team</li> </ul>"},{"location":"Topics/Coding%20Guidelines/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Guidelines are project dependent - ask your leads<ul> <li>If you are a lead, come up with a starting set of guidelines (they can always be updated later)</li> </ul> </li> <li>Refine guidelines through the Feedback process</li> <li>Enforces consistency between developers and within individual code</li> <li>If the style is enforce programmatically, making changes is easy</li> <li>Propose guidelines if none exist<ul> <li>It's a lot easier to get buy-in on a draft than asking for one to be created</li> </ul> </li> <li>Don't get too bogged down by guidelines. They are nice to have, but shouldn't halt progress</li> <li>Use tools to automatically format code<ul> <li>VSCode - \"Format code\" in toolbar</li> </ul> </li> </ul>"},{"location":"Topics/Coding%20Guidelines/#coding-guidelines","title":"Coding Guidelines","text":"<ul> <li>Naming conventions for variables and functions<ul> <li>Make names easy to understand</li> <li>Avoid ambiguous abbreviations</li> </ul> </li> <li>Magic values<ul> <li>Unclear why they were chosen, units</li> </ul> </li> <li>Keep use case in mind<ul> <li>Consider context when developing and commenting</li> <li>If on a sensitive project, don't use sensitive terminology or terms in comments on an otherwise non-sensitive project - saves review and cleanup time later</li> </ul> </li> <li>Formatting<ul> <li>Tabs vs spaces (this is important in some languages, like Python)</li> </ul> </li> </ul>"},{"location":"Topics/Debugging/","title":"Debugging","text":""},{"location":"Topics/Debugging/#scenario","title":"Scenario","text":"<ul> <li>My code doesn't work and I need to figure out why, but...<ul> <li>printing the contents of an object is going to be a pain</li> <li>I don't know where to start looking</li> </ul> </li> </ul>"},{"location":"Topics/Debugging/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Take some time to learn how to use a debugger</li> <li>Take advantage of IDEs that incorporate debuggers - lowers the learning curve</li> </ul>"},{"location":"Topics/Debugging/#benefits-of-debuggers","title":"Benefits of Debuggers","text":"<p>Debuggers allow for interactive inspection without modifying code!</p>"},{"location":"Topics/Debugging/#debugger-quickstart","title":"Debugger Quickstart","text":"<p>Debuggers aren't always hard to use. In VSCode, it only requires a few extensions and a configuration file and you get an interactive debugging GUI - small learning curve! The config file can even be added to a project so it only has to be created once for everyone!</p>"},{"location":"Topics/Debugging/#why-not-just-use-print","title":"Why not just use print?","text":"<p>How many times have you printed something and it has not been useful or the wrong format and you have to do it all again?</p> <p>In some cases, print may be quick and adequate. However there are some downsides to print debugging:</p> <ul> <li>Adding print statements can take a lot of time</li> <li>Removing print statements also takes a lot of time</li> <li>Removing print statements you missed removing the first time takes a lot of time</li> <li>Print statements can impact execution performance</li> </ul>"},{"location":"Topics/Documentation/","title":"Documentation","text":""},{"location":"Topics/Documentation/#scenario","title":"Scenario","text":"<p>Imagine the situation:</p> <ul> <li>You start a new job or project</li> <li>The senior developer (only other person on the team) knows how everything works. It's just them, so they didn't write it down.</li> <li>They start training you on how the code works. It's making some sense, but it's complicated.</li> <li>After 2 weeks of training and onboarding, the senior developer goes on vacation. \"Nothing ever goes wrong, you should be fine.\"</li> <li>While they are on vacation, something goes wrong...<ul> <li>The customer calls you up asking for support on their production system.</li> </ul> </li> <li>You don't know enough to solve the problem, but they need this fixed.  There is no one else.</li> <li>You are on the phone with them from 11:00 AM to 11:00 PM trying to understand how things work and find the bug that broke everything.</li> </ul> <p>This situation is awful (speaking from personal experience).</p> How could this have gone better? <p>Documentation!</p> <p>My Mantra</p> <p>Write documentation so the next person can do your job (the next person may be you!).</p>"},{"location":"Topics/Documentation/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Act like every day is your last day (one day will be) - don't wait until the end to write it down</li> <li>Be clear and explicit - you won't remember!</li> <li>Make it so people (including yourself) can use your work without your help</li> <li>Is this something that you would find useful?</li> <li>What is missing that would be useful to you?</li> <li>If you pick up the code in a year, will you remember how it works and how to use it?</li> <li>Write it like you are preparing for your last day<ul> <li>What would your replacement need to know if you weren't there? Could they get it to work? How long would it take to set up? To figure out how to use it?</li> </ul> </li> <li>Adds notes in comments saying where code was taken from (links to StackOverflow, reference documentation, etc).<ul> <li>If someone (including you) is trying to read your code later, they can follow the link and learn why it was done this way or how to modify.</li> </ul> </li> <li>Documentation applies to commit and merge messages too<ul> <li>You may need to find that commit with your important fix later</li> </ul> </li> </ul>"},{"location":"Topics/Documentation/#documentation-types","title":"Documentation Types","text":"<p><sup>1</sup></p> <ol> <li> <p>https://documentation.divio.com/ \u21a9</p> </li> </ol>"},{"location":"Topics/Feedback/","title":"Feedback","text":""},{"location":"Topics/Feedback/#scenario","title":"Scenario","text":"<ul> <li>I think we are doing something wrong</li> <li>I think there are better ways to handle the code</li> <li>The process could use some improvements</li> </ul>"},{"location":"Topics/Feedback/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Let your thoughts be known</li> <li>Don't be afraid to ask questions!</li> <li>If you have a suggestion, bring it up to a lead</li> <li>Providing feedback up the chain on what is/isn't working</li> <li>Ask for one-on-ones with project lead<ul> <li>Lets you know what to work on</li> <li>Provides opportunity to provide feedback on the project</li> </ul> </li> </ul>"},{"location":"Topics/Feedback/#common-problem-areas","title":"Common Problem Areas","text":"<p>Here are some common problem areas I've seen on various projects:</p> <ul> <li>Challenges with project onboarding<ul> <li>What would make things easier?</li> <li>Where are the bottlenecks?</li> </ul> </li> <li>Single points of failure</li> </ul> <p>The process is agile too, not just the code</p> <p> <sup>1</sup></p> <ol> <li> <p>https://www.atlassian.com/agile/scrum/sprints \u21a9</p> </li> </ol>"},{"location":"Topics/Logging/","title":"Logging","text":""},{"location":"Topics/Logging/#scenario","title":"Scenario","text":"<ul> <li>My software isn't working and I need to debug it, but don't want to set up a debugger</li> <li>I don't want to modify my code to verify things are working as expected</li> <li>I want to know if something goes wrong when the code is running</li> <li>Deployed code is failing and there isn't a way to get a debugger attached</li> </ul>"},{"location":"Topics/Logging/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Use logging instead of built-in print functions<ul> <li>Allows for control of log levels to tune the output on demand</li> </ul> </li> </ul>"},{"location":"Topics/Logging/#logging-and-printing-output","title":"Logging and printing output","text":"<ul> <li>Can keep all the debugging printouts (just log them at a low DEBUG level)</li> <li>Configurable log levels allows for information to be available without changing code</li> <li> <p>Consult with the project lead on how log levels are used in the project and how many there are</p> </li> <li> <p>Sometimes in a deployed system, if something goes wrong, logs may be the only breadcrumbs you have to figure out a problem. Make the messages clear!</p> </li> </ul>"},{"location":"Topics/Logging/#log-levels","title":"Log Levels","text":"<p>My take on log levels:</p> <ul> <li>DEBUG<ul> <li>all the info you would need to verify things are working or to find a problem</li> <li>Will likely spam logs</li> </ul> </li> <li>INFO<ul> <li>provides info about the high level operations that you may want to know about</li> <li>Don't want these to spam the logs</li> </ul> </li> <li>WARNING<ul> <li>When something wrong or unexpected happens, but you can recover</li> <li>This is something you may want to know so you can look into and fix it later</li> </ul> </li> <li>ERROR<ul> <li>Something bad happened and you can't recover from it</li> </ul> </li> </ul>"},{"location":"Topics/Logging/#additional-resources","title":"Additional Resources","text":"<ul> <li>Python logging</li> </ul>"},{"location":"Topics/Merge%20Requests/","title":"Merge Requests","text":""},{"location":"Topics/Merge%20Requests/#my-process","title":"My Process","text":"<p>This is how I like to do my process, but yours can be different or set by your project lead.</p> <ul> <li>Create a \"Draft\" Merge Request at the start of my work</li> <li>Do the work</li> <li>When done, remove \"Draft\" status and request Code Reviews</li> <li>If more work is required (bug found or responding to review comments), mark as a Draft again to pause reviews</li> <li>Once approved, merge (following Workflow process)</li> </ul> <p>Drafts</p> <p>I use \"Draft\" in my Merge Requests to indicate the work is not ready to be reviewed. If using \"Draft\" this way, make sure the team is on board, so they all know when to review code.</p> <p>Merge Checklist</p> <p>GitLab default issue templates can be set up, allowing for checklists of all the steps for a Merge Request to encourage the process.</p> <p>Pull Request vs Merge Request?</p> <p>Generally, they likely refer to the same thing. There are some subtle differences though.</p>"},{"location":"Topics/Requirements%20%26%20Design/","title":"Requirements & Design","text":""},{"location":"Topics/Requirements%20%26%20Design/#scenario","title":"Scenario","text":"<ul> <li>You get an assignment and dive into coding<ul> <li>Once you get to the end, you test it out and realize it isn't doing what it needs to do</li> </ul> </li> <li>You work on a problem to connect two components, only to find out that A and B are incompatible after hours of work</li> </ul>"},{"location":"Topics/Requirements%20%26%20Design/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Requirements should be defined as early and completely as possible</li> <li>Requirements should define test cases, which define designs, which defines code structure</li> <li>Designs can help uncover and find solutions to potential implementation problems</li> <li>In many cases, writing software from a design is a lot easier than designing as you go</li> <li>It's ok if some requirements or details are unknown at the beginning</li> <li>Follow the Test Driven Development process</li> </ul>"},{"location":"Topics/Secure%20Coding/","title":"Secure Coding","text":"<p>Some tips for being careful when developing code:</p> <ul> <li>Read complier errors AND warnings</li> <li>Check return values for errors</li> <li>Check pointers for NULL</li> <li>Initialize pointers to NULL</li> <li>Free memory when it is no longer needed</li> <li>Max sizes on strings, containers</li> <li>Compare variables of different sizes/signedness</li> </ul>"},{"location":"Topics/Secure%20Coding/#the-power-of-10","title":"The Power of 10","text":"<p>The ten rules are<sup>1</sup>:</p> <ol> <li>Avoid complex flow constructs, such as\u00a0goto\u00a0and\u00a0recursion.</li> <li>All loops must have fixed bounds. This prevents runaway code.</li> <li>Avoid\u00a0heap memory allocation.</li> <li>Restrict functions to a single printed page.</li> <li>Use a minimum of two\u00a0runtime assertions\u00a0per function.</li> <li>Restrict the scope of data to the smallest possible.</li> <li>Check the return value of all non-void functions, or cast to void to indicate the return value is useless.</li> <li>Use the\u00a0preprocessor\u00a0sparingly.</li> <li>Limit pointer use to a single\u00a0dereference, and do not use\u00a0function pointers.</li> <li>Compile with all possible warnings active; all warnings should then be addressed before release of the software.</li> </ol> <ol> <li> <p>https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code?useskin=vector \u21a9</p> </li> </ol>"},{"location":"Topics/Test%20Driven%20Development/","title":"Test Driven Development","text":""},{"location":"Topics/Test%20Driven%20Development/#scenario","title":"Scenario","text":"<ul> <li>I implemented my feature and I think it works...</li> <li>I'm not super confident my changes didn't break something else</li> </ul>"},{"location":"Topics/Test%20Driven%20Development/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Follow the process:<ul> <li>Requirements/design<ul> <li>Define what it is supposed to do</li> </ul> </li> <li>Write tests<ul> <li>Verify code does what it should do (should fail first)</li> <li>Helps to enforce Testable Code</li> </ul> </li> <li>Implement<ul> <li>Write code to pass tests</li> </ul> </li> <li>When passing, clean up and optimize<ul> <li>Tests will continue to verify functionality</li> <li>Optimization comes at the end</li> </ul> </li> </ul> </li> </ul> <p>Excerpt from Modern C++ Programming with Test-Driven Development, Section 3.3 The TDD Cycle<sup>1</sup></p> <p>At each point in the TDD cycle, you must be able to answer many questions.</p> <ul> <li>Write a small test\u200b. What\u2019s the smallest possible piece of behavior you can increment the system by (\u200bWhat\u2019s the Next Test?\u200b, offers a few ideas)? Does the system already have that behavior? How can you concisely describe the behavior in the test\u2019s name? Does the interface expressed in the test represent the best possible way for client code to use the behavior?</li> <li>Ensure the new test fails\u200b. If it doesn\u2019t, why not? Does the behavior already exist? Did you forget to compile? Did you take too large a step in the prior test? Is its assertion valid?</li> <li>\u200bWrite the code you think makes the test pass\u200b. Are you writing no more code than needed to meet the current set of behaviors specified by the tests? Are you recognizing where the code you just wrote will need to be cleaned up? Are you following your team\u2019s standards?</li> <li>\u200bEnsure all the tests pass\u200b. If not, did you code things incorrectly, or is your specification incorrect?</li> <li>\u200bClean up the code changes you just made\u200b. What do you need to do in order to get your code to follow team standards? Does your new code duplicate other code in the system that you should clean up, too? Does the code exhibit questionable smells? Are you following good design principles? What else do you know about design and clean code that you should apply here? Otherwise, is the design evolving in a good direction? Does your code change impact the design of other code areas that you should also change?</li> <li>\u200bEnsure the tests all still pass\u200b. Do you trust that you have adequate unit test coverage? Should you run a slower set of tests to have the confidence to move on? What\u2019s the next test?</li> </ul> <ol> <li> <p>Modern C++ Programming with Test-Driven Development by\u00a0Jeff Langr \u21a9</p> </li> </ol>"},{"location":"Topics/Testable%20Code/","title":"Testable Code","text":""},{"location":"Topics/Testable%20Code/#scenario","title":"Scenario","text":"<ul> <li>You have to fix or update an existing code base, but you don't want to break any existing functionality<ul> <li>Case 1: There are minimal or no unit tests. It's not clear how any of the code works...or does it?</li> <li>Case 2: There are lots of unit tests that all pass when you first run it.</li> <li>Which of the above situations is better?</li> </ul> </li> <li>You want to test the code, but all the functionality is in one giant function or requires complicated setup to exercise different cases.</li> </ul>"},{"location":"Topics/Testable%20Code/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>A unit tested code base is MUCH easier to learn and contribute to</li> <li>Unit tests are a great way to be confident you didn't accidentally break something that used to work</li> <li>Break functionality into functions to allow for them to be tested independently</li> <li>Requirements should define tests, not the other way around - Test Driven Development</li> <li>Make code testable</li> <li>Functions and unit tests make showing incremental progress obvious</li> <li>If code is taken from a reference or example, make sure it actually does what you need it to do - test it!</li> </ul>"},{"location":"Topics/Testable%20Code/#functions","title":"Functions","text":"<ul> <li>Keep functions focused on a single thing<ul> <li>Return something or perform a task</li> </ul> </li> <li>Avoid using state in functions unless required</li> <li>Make functions independent and deterministic</li> <li>Functions should be easily testable<ul> <li>If there is a lot of setup involved just to test a particular case, is there a more straightforward approach?</li> </ul> </li> <li>Lambda functions can be challenging to unit test</li> </ul>"},{"location":"Topics/Testable%20Code/#example-code","title":"Example Code","text":"<p>Note</p> <p>The example code can be found in the Example Project repository.</p> <p>Consider the following example code snippets:</p> Example 1 <pre><code>y = [xx for xx in range(100) if ((xx // 10) + (xx % 10)) % 7 == 0]\n</code></pre> Example 2 <pre><code>def tens(x):\n   return x // 10\n\ndef ones(x):\n   return x % 10\n\ndef sum_digits(x):\n   return tens(x) + ones(x)\n\ndef is_divisible(x, divisor):\n   return x % divisor == 0\n\nz = [xx for xx in range(100) if is_divisible(sum_digits(xx), 7)]\n</code></pre> What is this code doing? <p>Finding all numbers less than 100 where the sum of the digits is divisible by 7</p> <p>Which is easier to understand? Which is easier to test?</p> Are there any potential bugs? <ul> <li><code>tens()</code> and <code>sum_digits()</code> do not account for numbers &gt;= 100</li> </ul> <p>Some additional things to consider:</p> <ul> <li>How would you verify the results?</li> <li>How would the code change if the requirements changed?</li> <li>How much effort would it be to verify everything still works?</li> </ul>"},{"location":"Topics/Testable%20Code/#example-tests","title":"Example Tests","text":"<p>These tests are using pytest as an example.</p> <pre><code>def test_tens():\n\u00a0 \u00a0 assert tens(0) == 0\n\u00a0 \u00a0 assert tens(5) == 0\n\u00a0 \u00a0 assert tens(10) == 1\n\u00a0 \u00a0 assert tens(42) == 4\n\u00a0 \u00a0 assert tens(123) == 2\n\ndef test_ones():\n\u00a0 \u00a0 assert ones(0) == 0\n\u00a0 \u00a0 assert ones(5) == 5\n\u00a0 \u00a0 assert ones(10) == 0\n\u00a0 \u00a0 assert ones(42) == 2\n\u00a0 \u00a0 assert ones(123) == 3\n\ndef test_sum_digits():\n\u00a0 \u00a0 assert sum_digits(0) == 0\n\u00a0 \u00a0 assert sum_digits(5) == 5\n\u00a0 \u00a0 assert sum_digits(10) == 1\n\u00a0 \u00a0 assert sum_digits(42) == 6\n\u00a0 \u00a0 assert sum_digits(123) == 6\n</code></pre>"},{"location":"Topics/Tools/","title":"Tools","text":""},{"location":"Topics/Tools/#scenario","title":"Scenario","text":"<ul> <li>Someone suggested a tool that will \"make my life easier\" - but it's hard to use</li> <li>I know enough about a tool to get my job done, but it's a struggle</li> <li>I don't know what tool to use to do my work</li> </ul>"},{"location":"Topics/Tools/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>The right tools make the job MUCH easier.</li> <li>Read the documentation or do the tutorials for tools you will use - it will save time in the long run</li> </ul> <p>Learning tools is part of your job</p> <p>It's ok to spend time working through tutorials and learning how to use the tools effectively. It will make you more efficient and productive overall!</p>"},{"location":"Topics/Tools/#code-tools","title":"Code Tools","text":""},{"location":"Topics/Tools/#static-code-analyzers","title":"Static Code Analyzers","text":"<p>Why use it?</p> <p>Helps maintain consistent code quality and best practices.</p> <p>There are many tools available to analyze, standardize, and clean up code in automated ways. </p> <p>Some examples are:</p> <ul> <li>Type checking</li> <li>Linting - Static analysis on source code to flag patterns that might cause errors or other problems (reference)</li> <li>Code formatter</li> <li>Logging</li> </ul>"},{"location":"Topics/Tools/#templates-and-blueprints","title":"Templates and Blueprints","text":"<p>Why use it?</p> <p>Using templates helps standardize code and implements pre-configured best practices</p> <p>Some example code blueprints from @hagenjt1:</p> <ul> <li>https://github.com/johnthagen/clang-blueprint</li> <li>https://github.com/johnthagen/python-blueprint</li> </ul>"},{"location":"Topics/Tools/#debuggers","title":"Debuggers","text":"<p>Why use it?</p> <p>Makes debugging code MUCH easier! See the Debugging section for more info.</p> <ul> <li>gdb</li> </ul>"},{"location":"Topics/Tools/#workflow-tools","title":"Workflow Tools","text":""},{"location":"Topics/Tools/#source-control","title":"Source Control","text":"<p>Why use it?</p> <p>Tracks changes as you work and lets you always go back to a working state...provided the changes were committed! So commit often!!</p> <ul> <li>Git<ul> <li>Interactive Git tutorial: https://learngitbranching.js.org/?locale=en_US</li> <li>Useful Git commands: https://dev.to/mukeshkuiry/10-must-know-git-commands-for-software-engineers-3733</li> <li>Fixing Git problems: https://dangitgit.com/en</li> </ul> </li> </ul>"},{"location":"Topics/Tools/#continuous-integrationcontinuous-deployment-cicd","title":"Continuous Integration/Continuous Deployment (CI/CD)","text":"<p>Why use it?</p> <p>CI/CD can automate testing and verifying that code is correct by building and running tests. This can help prevent Breaking Changes.</p> <p>Some example tools:</p> <ul> <li>Gitlab CI<ul> <li>There is a lot of contents and it can be daunting to learn...but is not that hard!</li> <li>Gitlab's documentation is pretty good: https://docs.gitlab.com/ee/ci/</li> </ul> </li> <li>Bamboo CI<ul> <li>Ties to BitBucket</li> </ul> </li> </ul>"},{"location":"Topics/Tools/#integrated-development-environments-ides","title":"Integrated Development Environments (IDEs)","text":"<p>Why use it?</p> <p>IDEs can streamline the development process and have a lot of features to make life easier</p> <ul> <li>VS Code</li> <li>PyCharm</li> <li>CLion</li> </ul>"},{"location":"Topics/Tools/#notetaking","title":"Notetaking","text":"<p>Why use it?</p> <p>Keeping good Documentation will help yourself and others on the team</p> <p>Some example tools:</p> <ul> <li>https://obsidian.md/</li> </ul> <p>Confluence labels</p> <p>I found adding labels to Confluence pages makes finding them much easier. This allows you to group similar pages by content or topics so you can find all related pages at once.</p>"},{"location":"Topics/Workflow/","title":"Workflow","text":"","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#scenario","title":"Scenario","text":"<ul> <li>Everyone on the team is working on the same code and constantly stomping on each other's toes</li> <li>Everyone's has been working for a while and finally puts everything together - and nothing works!<ul> <li>\"It worked on my machine\"</li> <li>\"You broke something\" - Should be \"WE\" broke something</li> </ul> </li> <li>You only have a small change to make, so you commit straight to <code>main</code> branch - but I made a mistake and it broke everything!</li> <li>I want to experiment, but I'm not sure the code will work</li> </ul>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>ALWAYS do your work on a branch, even if it's a small change</li> <li>Branches let everyone work independently</li> <li>Branches are free - make new branches to experiment and merge if they work</li> <li>Smaller branches make Code Reviews easier to review</li> <li>Always merge target branch into your branch BEFORE merging back - then retest!<ul> <li>Example: When I want to merge my <code>feat-offset</code> branch into <code>develop</code>, I should merge <code>develop</code> into <code>feat-offset</code> first and resolve any problems</li> </ul> </li> <li>No merge conflicts != no problems</li> <li>Commit and push code regularly<ul> <li>If working on a branch, it shouldn't harm anyone else</li> <li>Shows your team you are making progress</li> <li>Provides a backup in case something happens to your computer and you lose your work</li> </ul> </li> <li>Make sure code compiles and tests pass before merging<ul> <li>I try to avoid broken code even on my branches, but if I have to check in something that doesn't work, I mark it as \"DRAFT\" or \"WIP\" (Work in Progress)</li> </ul> </li> <li>Use merge rules can be set up in GitLab to protect branches from accidental merges</li> <li>Design and planning makes the development easier</li> </ul> <p>Code Reviews</p> <p>Merge Requests</p>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#git-workflow-walkthrough","title":"Git Workflow Walkthrough","text":"","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#process","title":"Process","text":"<ul> <li>Create branch from the main (<code>main</code>, <code>develop</code>, etc) branch</li> <li>Do work, committing and pushing often on your branch</li> <li>When done, merge main branch updates back into your branch</li> <li>Make sure tests still work</li> <li>Open up a Merge Request</li> <li>Get reviewed by teammates</li> <li>Address comments, but be careful to stay focused on issue the branch is addressing<ul> <li>Any additional work can be put into a new issue to be worked in another branch</li> </ul> </li> <li>Merge into main branch</li> <li>Notify team/anyone working on code that may be affected by your change (see Breaking Changes)<ul> <li>Changes to how existing functionality works, what a function does</li> <li>Changes to APIs or interfaces</li> </ul> </li> </ul> <p>Example Project</p> <p>The workflow below is set up in an example repository. Feel free to follow along on GitLab, or make a copy and play with it yourself!</p>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#example-scenario","title":"Example Scenario","text":"<p>In the example scenario below:</p> <ul> <li>I am a developer working on a team of multiple people</li> <li>Each person is working on something different</li> </ul>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#project-setup","title":"Project Setup","text":"<ul> <li>After defining requirements (<code>define requirements</code> commit):<ul> <li>Where do we start?</li> <li>How can people work without conflicting?</li> <li>Create a stub so work can be separated<ul> <li>Separate functions allow<ul> <li>each team member to work independently</li> <li>testing of small chunks of functionality</li> </ul> </li> </ul> </li> </ul> </li> <li><code>feat-stub</code> branch<ul> <li>One person can set up the project</li> <li>Adds onboarding instructions, so anyone can pick up the repo and get started quickly</li> <li>Adds some basic functionality (combined step for simplicity)</li> <li>Merge branch back into <code>develop</code> branch</li> </ul> </li> <li>Developers can now work independently and in parallel<ul> <li>Developer A (someone else) - Fix a bug - <code>fix-ave</code> branch</li> <li>Developer B (me) - Add new feature - <code>feat-offset</code> branch</li> <li>However, both developer's work affects each other's!</li> </ul> </li> </ul> Process <ol> <li>Merge <code>feat-stub</code> branch into <code>develop</code> branch</li> <li>Merge <code>develop</code> branch into <code>main</code> branch`</li> <li>Tag <code>main</code> branch as <code>v0.0</code></li> <li>Merge <code>fix-ave</code> branch into <code>develop</code> branch</li> </ol>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#combining-work","title":"Combining Work","text":"<ul> <li>I am working on a new feature in the <code>feat-offset</code> branch</li> <li>Another developer is simultaneously fixing a bug in the  <code>fix-ave</code> branch</li> <li>The bug fix was finished first and merged into the <code>develop</code> branch</li> <li>I finished my new feature and am ready to merge it into <code>develop</code></li> </ul> <pre><code>gitGraph\n\u00a0 \u00a0 commit id: \"initial commit\"\n\u00a0 \u00a0 branch develop\n\u00a0 \u00a0 commit id: \"define requirements\"\n\n\u00a0 \u00a0 branch feat-stub\n\u00a0 \u00a0 checkout feat-stub\n\u00a0 \u00a0 commit id: \"create stub\"\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge feat-stub id: \"working stub\"\n\u00a0 \u00a0 checkout main\n\u00a0 \u00a0 merge develop id: \"working release\" tag: \"v0.0\"\n\u00a0 \u00a0 checkout develop\n\n\u00a0 \u00a0 branch fix-ave\n\u00a0 \u00a0 branch feat-offset\n\n\u00a0 \u00a0 checkout fix-ave\n\u00a0 \u00a0 commit id: \"adjust tests for median\"\n\u00a0 \u00a0 commit id: \"switch mean to median\"\n\u00a0 \u00a0 commit id: \"udpate documentation\"\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge fix-ave id: \"still working\"\n\n\u00a0 \u00a0 checkout feat-offset\n\u00a0 \u00a0 commit id: \"add failing offset tests\"\n\u00a0 \u00a0 commit id: \"implement offset\"\n\u00a0 \u00a0 commit id: \"integrate and test offset\"\n\n\u00a0 \u00a0 %% This is the branching point between the BAD and GOOD workflows</code></pre> \"What do I do next?\" <p>See Workflow#Good Workflow</p> Workflow branch point <p>The Bad and Good workflows deviate at this commit</p>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#bad-workflow","title":"Bad Workflow","text":"<pre><code>gitGraph\n\u00a0 \u00a0 commit id: \"initial commit\"\n\u00a0 \u00a0 branch develop\n\u00a0 \u00a0 commit id: \"define requirements\"\n\n\u00a0 \u00a0 branch feat-stub\n\u00a0 \u00a0 checkout feat-stub\n\u00a0 \u00a0 commit id: \"create stub\"\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge feat-stub id: \"working stub\"\n\u00a0 \u00a0 checkout main\n\u00a0 \u00a0 merge develop id: \"working release\" tag: \"v0.0\"\n\u00a0 \u00a0 checkout develop\n\n\u00a0 \u00a0 branch fix-ave\n\u00a0 \u00a0 branch feat-offset\n\n\u00a0 \u00a0 checkout fix-ave\n\u00a0 \u00a0 commit id: \"adjust tests for median\"\n\u00a0 \u00a0 commit id: \"switch mean to median\"\n\u00a0 \u00a0 commit id: \"udpate documentation\"\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge fix-ave id: \"still working\"\n\n\u00a0 \u00a0 checkout feat-offset\n\u00a0 \u00a0 commit id: \"add failing offset tests\"\n\u00a0 \u00a0 commit id: \"implement offset\"\n\u00a0 \u00a0 commit id: \"integrate and test offset\"\n\n\u00a0 \u00a0 %% This is the branching point between the BAD and GOOD workflows\n\u00a0 \u00a0 %% BAD workflow\n\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge feat-offset type: reverse id: \"broken!\"\n\n\u00a0 \u00a0 checkout main\n\u00a0 \u00a0 merge develop id: \"Still broken!\" type: reverse tag: \"v1.0\"</code></pre> Branch names <p>Copies of the branches were created in the example repo to illustrate this workflow:</p> <ul> <li><code>develop-bad</code> is a copy of <code>develop</code></li> <li><code>feat-offset-bad</code> is a copy of <code>feat-offset</code>, starting from the <code>integrate and test offset</code> commit</li> </ul> Process <ol> <li>Merge <code>feat-offset</code> branch into <code>develop</code> branch</li> <li>Test <code>develop</code>  branch<ul> <li>Branch is now broken (tests fail)!</li> </ul> </li> </ol> <p>Why this is bad</p> <ul> <li>Does not verify merged changes actually work</li> <li>Relies exclusively on git's merge to solve all problems</li> <li>Introduces problems into the target branch (<code>develop</code>)</li> </ul>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#good-workflow","title":"Good Workflow","text":"<pre><code>gitGraph\n\u00a0 \u00a0 commit id: \"initial commit\"\n\u00a0 \u00a0 branch develop\n\u00a0 \u00a0 commit id: \"define requirements\"\n\n\u00a0 \u00a0 branch feat-stub\n\u00a0 \u00a0 checkout feat-stub\n\u00a0 \u00a0 commit id: \"create stub\"\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge feat-stub id: \"working stub\"\n\u00a0 \u00a0 checkout main\n\u00a0 \u00a0 merge develop id: \"working release\" tag: \"v0.0\"\n\u00a0 \u00a0 checkout develop\n\n\u00a0 \u00a0 branch fix-ave\n\u00a0 \u00a0 branch feat-offset\n\n\u00a0 \u00a0 checkout fix-ave\n\u00a0 \u00a0 commit id: \"adjust tests for median\"\n\u00a0 \u00a0 commit id: \"switch mean to median\"\n\u00a0 \u00a0 commit id: \"udpate documentation\"\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge fix-ave id: \"still working\"\n\n\u00a0 \u00a0 checkout feat-offset\n\u00a0 \u00a0 commit id: \"add failing offset tests\"\n\u00a0 \u00a0 commit id: \"implement offset\"\n\u00a0 \u00a0 commit id: \"integrate and test offset\"\n\n\u00a0 \u00a0 %% This is the branching point between the BAD and GOOD workflows\n\u00a0 \u00a0 %% GOOD workflow\n\u00a0 \u00a0 merge develop id: \"resolve merge conflicts\"\n\u00a0 \u00a0 commit id: \"fix all tests\"\n\n\u00a0 \u00a0 checkout develop\n\u00a0 \u00a0 merge feat-offset type: highlight id: \"all still working!\"\n\n\u00a0 \u00a0 checkout main\n\u00a0 \u00a0 merge develop id: \"Still working\" tag: \"v1.0\"</code></pre> Branch names <p>Copies of the branches were created in the example repo to illustrate this workflow:</p> <ul> <li><code>develop-good</code> is a copy of <code>develop</code></li> <li><code>feat-offset-good</code> is a copy of <code>feat-offset</code>, starting from the <code>integrate and test offset</code> commit</li> </ul> Process <ol> <li>Merge <code>develop</code> branch into <code>feat-offset</code> branch</li> <li>Test <code>feat-offset</code> branch<ul> <li>Branch is now broken (tests fail)!</li> </ul> </li> <li>Fix everything in the <code>feat-offset</code> branch</li> <li>Merge <code>feat-offset</code> branch into <code>develop</code> branch</li> <li>Test\u00a0<code>develop</code>\u00a0branch<ul> <li>Branch works (tests pass)!</li> </ul> </li> </ol> <p>Why this is good</p> <ul> <li>Incorporates changes on the target branch (<code>develop</code>) before merging</li> <li>Tests to make sure the result of the merge is still correct</li> <li>Allows for fixing of problems before merging into the target branch (<code>develop</code>)</li> </ul>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]},{"location":"Topics/Workflow/#other-workflows","title":"Other Workflows","text":"<p>There are many different workflows. The example above is just one. </p> <p>Here are some examples from Gitflow<sup>1</sup>:</p> Feature branch <p> <sup>1</sup></p> Release branch <p> <sup>1</sup></p> Hotfix branch <p> <sup>1</sup></p> <ol> <li> <p>https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow#:~:text=What%20is%20Gitflow%3F,lived%20branches%20and%20larger%20commits \u21a9\u21a9\u21a9\u21a9</p> </li> </ol>","tags":["git","workflow","merge","merge-request","#branch","#branching","branches"]}]}